@page "/Account/Register"

@using System.ComponentModel.DataAnnotations
@using System.Text
@using System.Text.Encodings.Web
@using Microsoft.AspNetCore.Identity
@using Microsoft.AspNetCore.WebUtilities
@using SilikonBlazorApp.Data
@using SilikonBlazorApp.Filters

@inject UserManager<ApplicationUser> UserManager
@inject IUserStore<ApplicationUser> UserStore
@inject SignInManager<ApplicationUser> SignInManager
@inject IEmailSender<ApplicationUser> EmailSender
@inject ILogger<Register> Logger
@inject NavigationManager NavigationManager
@inject IdentityRedirectManager RedirectManager

<PageTitle>Register</PageTitle>

@* @model SignUpViewModel *@
<!-- Signup Start -->
<div class="signup-section">
    <div class="signup">
        <StatusMessage Message="@Message" />
        <EditForm class="signup-form" Model="Input" asp-route-returnUrl="@ReturnUrl" method="post" OnValidSubmit="RegisterUser" FormName="register">
            <DataAnnotationsValidator />
            <hr />
            <ValidationSummary class="text-danger" role="alert" />
            <div class="s-f-heading">
                <div class="l-f-h-title">
                    Welcome Back
                </div>
                <div class="l-f-h-signup">
                    Already have an account? <a href="/Account/Login">Sign In here</a>
                </div>
            </div>
            <div class="s-f-inputs">
                <div class="s-f-s-fullname">
                    <div class="s-f-s-fname">
                        <label class="s-f-i-label" for="FirstName"></label>
                        <InputText @bind-Value="Input.FirstName" autocomplete="FirstName" aria-required="true" placeholder="First Name" for="FirstName" id="firstname" />
                        <ValidationMessage For="() => Input.FirstName" class="text-danger" />
@*                         <span asp-validation-for="FirstName"></span> *@

                    </div>
                    <div class="s-f-s-lname">
                        <label class="s-f-i-label" for="LastName"></label>
                        <InputText @bind-Value="Input.LastName" autocomplete="LastName" aria-required="true" placeholder="Last Name" for="LastName" id="lastname" />
                        <ValidationMessage For="() => Input.LastName" class="text-danger" />
@*                         <span asp-validation-for="LastName"></span> *@
                    </div>

                </div>
                <label class="s-f-i-label" for="Email"></label>
                <InputText @bind-Value="Input.Email" autocomplete="username" aria-required="true" placeholder="name@example.com" for="Email" id="email" />
                <ValidationMessage For="() => Input.Email" class="text-danger" />
                <span asp-validation-for="Email"></span>
                <label class="s-f-i-label" for="Password"></label>
                <InputText type="password" @bind-Value="Input.Password" autocomplete="new-password" aria-required="true" placeholder="password" for="Password" id="passowrd" />
                <span asp-validation-for="Password"></span>
                <label class="s-f-i-label" for="ConfirmPassword"></label>
                <InputText type="password" @bind-Value="Input.ConfirmPassword" autocomplete="new-password" aria-required="true" placeholder="password for="ConfirmPassword" id="confirmpassowrd" />
                <span asp-validation-for="ConfirmPassword"></span>
                <div class="custom-checkbox">
                    <InputCheckbox @bind-Value="Input.TermsAndConditions" id="customPolicy" type="checkbox" for="TermsAndConditions" />
                    <label class="custom-label" for="customPolicy">I agree to the <a href="#">Terms</a> & <a href="#">Conditions</a></label>
                    <span asp-validation-for="TermsAndConditions"></span>
                </div>

            </div>
            <button class="s-f-btn" type="submit">Sign up</button>
        </EditForm>
    </div>
</div>
<!-- Signup End -->
@code {
    private IEnumerable<IdentityError>? identityErrors;

    [SupplyParameterFromForm]
    private InputModel Input { get; set; } = new();

    [SupplyParameterFromQuery]
    private string? ReturnUrl { get; set; }

    private string? Message => identityErrors is null ? null : $"Error: {string.Join(", ", identityErrors.Select(error => error.Description))}";

    public async Task RegisterUser(EditContext editContext)
    {
        var user = CreateUser();

        user.FirstName = Input.FirstName;
        user.LastName = Input.LastName;

        await UserStore.SetUserNameAsync(user, Input.Email, CancellationToken.None);
        var emailStore = GetEmailStore();
        await emailStore.SetEmailAsync(user, Input.Email, CancellationToken.None);
        var result = await UserManager.CreateAsync(user, Input.Password);

        if (!result.Succeeded)
        {
            identityErrors = result.Errors;
            return;
        }

        Logger.LogInformation("User created a new account with password.");

        var userId = await UserManager.GetUserIdAsync(user);
        var code = await UserManager.GenerateEmailConfirmationTokenAsync(user);
        code = WebEncoders.Base64UrlEncode(Encoding.UTF8.GetBytes(code));
        var callbackUrl = NavigationManager.GetUriWithQueryParameters(
            NavigationManager.ToAbsoluteUri("Account/ConfirmEmail").AbsoluteUri,
            new Dictionary<string, object?> { ["userId"] = userId, ["code"] = code, ["returnUrl"] = ReturnUrl });

        await EmailSender.SendConfirmationLinkAsync(user, Input.Email, HtmlEncoder.Default.Encode(callbackUrl));

        if (UserManager.Options.SignIn.RequireConfirmedAccount)
        {
            RedirectManager.RedirectTo(
                "Account/RegisterConfirmation",
                new() { ["email"] = Input.Email, ["returnUrl"] = ReturnUrl });
        }

        await SignInManager.SignInAsync(user, isPersistent: false);
        RedirectManager.RedirectTo(ReturnUrl);
    }

    private ApplicationUser CreateUser()
    {
        try
        {
            return Activator.CreateInstance<ApplicationUser>();
        }
        catch
        {
            throw new InvalidOperationException($"Can't create an instance of '{nameof(ApplicationUser)}'. " +
                $"Ensure that '{nameof(ApplicationUser)}' is not an abstract class and has a parameterless constructor.");
        }
    }

    private IUserEmailStore<ApplicationUser> GetEmailStore()
    {
        if (!UserManager.SupportsUserEmail)
        {
            throw new NotSupportedException("The default UI requires a user store with email support.");
        }
        return (IUserEmailStore<ApplicationUser>)UserStore;
    }

    private sealed class InputModel
    {
        [DataType(DataType.Text)]
        [Display(Name = "First name", Prompt = "Enter your first name")]
        [Required(ErrorMessage = "Enter a first name")]
        [MinLength(2, ErrorMessage = "Enter a first name")]
        public string FirstName { get; set; } = null!;

        [DataType(DataType.Text)]
        [Display(Name = "Last name", Prompt = "Enter your last name")]
        [Required(ErrorMessage = "Enter a last name")]
        [MinLength(2, ErrorMessage = "Enter a last name")]
        public string LastName { get; set; } = null!;



        [Required]
        [EmailAddress]
        [Display(Name = "Email")]
        public string Email { get; set; } = "";

        [Required]
        [StringLength(100, ErrorMessage = "The {0} must be at least {2} and at max {1} characters long.", MinimumLength = 6)]
        [DataType(DataType.Password)]
        [Display(Name = "Password")]
        public string Password { get; set; } = "";

        [DataType(DataType.Password)]
        [Display(Name = "Confirm password")]
        [Compare("Password", ErrorMessage = "The password and confirmation password do not match.")]
        public string ConfirmPassword { get; set; } = "";

        [CheckboxRequierd(ErrorMessage = "You must accept the terms and conditions to proceed.")]
        [Display(Name = "I  agree to the Terms & Conditions.", Prompt = "Terms and Conditions")]
        public bool TermsAndConditions { get; set; }
    }
}
